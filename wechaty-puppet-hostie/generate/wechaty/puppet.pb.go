// Code generated by protoc-gen-go. DO NOT EDIT.
// source: puppet.proto

package wechaty

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	puppet "github.com/wechaty/go-wechaty/wechaty-puppet-hostie/generate/wechaty/puppet"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// StartRequest from public import puppet/base.proto
type StartRequest = puppet.StartRequest

// StartResponse from public import puppet/base.proto
type StartResponse = puppet.StartResponse

// StopRequest from public import puppet/base.proto
type StopRequest = puppet.StopRequest

// StopResponse from public import puppet/base.proto
type StopResponse = puppet.StopResponse

// VersionRequest from public import puppet/base.proto
type VersionRequest = puppet.VersionRequest

// VersionResponse from public import puppet/base.proto
type VersionResponse = puppet.VersionResponse

// LogoutRequest from public import puppet/base.proto
type LogoutRequest = puppet.LogoutRequest

// LogoutResponse from public import puppet/base.proto
type LogoutResponse = puppet.LogoutResponse

// DingRequest from public import puppet/base.proto
type DingRequest = puppet.DingRequest

// DingResponse from public import puppet/base.proto
type DingResponse = puppet.DingResponse

// ContactListRequest from public import puppet/contact.proto
type ContactListRequest = puppet.ContactListRequest

// ContactListResponse from public import puppet/contact.proto
type ContactListResponse = puppet.ContactListResponse

// ContactPayloadRequest from public import puppet/contact.proto
type ContactPayloadRequest = puppet.ContactPayloadRequest

// ContactPayloadResponse from public import puppet/contact.proto
type ContactPayloadResponse = puppet.ContactPayloadResponse

// ContactSelfQRCodeRequest from public import puppet/contact.proto
type ContactSelfQRCodeRequest = puppet.ContactSelfQRCodeRequest

// ContactSelfQRCodeResponse from public import puppet/contact.proto
type ContactSelfQRCodeResponse = puppet.ContactSelfQRCodeResponse

// ContactSelfNameRequest from public import puppet/contact.proto
type ContactSelfNameRequest = puppet.ContactSelfNameRequest

// ContactSelfNameResponse from public import puppet/contact.proto
type ContactSelfNameResponse = puppet.ContactSelfNameResponse

// ContactSelfSignatureRequest from public import puppet/contact.proto
type ContactSelfSignatureRequest = puppet.ContactSelfSignatureRequest

// ContactSelfSignatureResponse from public import puppet/contact.proto
type ContactSelfSignatureResponse = puppet.ContactSelfSignatureResponse

// ContactAliasRequest from public import puppet/contact.proto
type ContactAliasRequest = puppet.ContactAliasRequest

// ContactAliasResponse from public import puppet/contact.proto
type ContactAliasResponse = puppet.ContactAliasResponse

// ContactAvatarRequest from public import puppet/contact.proto
type ContactAvatarRequest = puppet.ContactAvatarRequest

// ContactAvatarResponse from public import puppet/contact.proto
type ContactAvatarResponse = puppet.ContactAvatarResponse

// ContactGender from public import puppet/contact.proto
type ContactGender = puppet.ContactGender

var ContactGender_name = puppet.ContactGender_name
var ContactGender_value = puppet.ContactGender_value

const ContactGender_CONTACT_GENDER_UNSPECIFIED = ContactGender(puppet.ContactGender_CONTACT_GENDER_UNSPECIFIED)
const ContactGender_CONTACT_GENDER_MALE = ContactGender(puppet.ContactGender_CONTACT_GENDER_MALE)
const ContactGender_CONTACT_GENDER_FEMALE = ContactGender(puppet.ContactGender_CONTACT_GENDER_FEMALE)

// ContactType from public import puppet/contact.proto
type ContactType = puppet.ContactType

var ContactType_name = puppet.ContactType_name
var ContactType_value = puppet.ContactType_value

const ContactType_CONTACT_TYPE_UNSPECIFIED = ContactType(puppet.ContactType_CONTACT_TYPE_UNSPECIFIED)
const ContactType_CONTACT_TYPE_PERSONAL = ContactType(puppet.ContactType_CONTACT_TYPE_PERSONAL)
const ContactType_CONTACT_TYPE_OFFICIAL = ContactType(puppet.ContactType_CONTACT_TYPE_OFFICIAL)

// EventRequest from public import puppet/event.proto
type EventRequest = puppet.EventRequest

// EventResponse from public import puppet/event.proto
type EventResponse = puppet.EventResponse

// EventType from public import puppet/event.proto
type EventType = puppet.EventType

var EventType_name = puppet.EventType_name
var EventType_value = puppet.EventType_value

const EventType_EVENT_TYPE_UNSPECIFIED = EventType(puppet.EventType_EVENT_TYPE_UNSPECIFIED)
const EventType_EVENT_TYPE_HEARTBEAT = EventType(puppet.EventType_EVENT_TYPE_HEARTBEAT)
const EventType_EVENT_TYPE_MESSAGE = EventType(puppet.EventType_EVENT_TYPE_MESSAGE)
const EventType_EVENT_TYPE_DONG = EventType(puppet.EventType_EVENT_TYPE_DONG)
const EventType_EVENT_TYPE_ERROR = EventType(puppet.EventType_EVENT_TYPE_ERROR)
const EventType_EVENT_TYPE_FRIENDSHIP = EventType(puppet.EventType_EVENT_TYPE_FRIENDSHIP)
const EventType_EVENT_TYPE_ROOM_INVITE = EventType(puppet.EventType_EVENT_TYPE_ROOM_INVITE)
const EventType_EVENT_TYPE_ROOM_JOIN = EventType(puppet.EventType_EVENT_TYPE_ROOM_JOIN)
const EventType_EVENT_TYPE_ROOM_LEAVE = EventType(puppet.EventType_EVENT_TYPE_ROOM_LEAVE)
const EventType_EVENT_TYPE_ROOM_TOPIC = EventType(puppet.EventType_EVENT_TYPE_ROOM_TOPIC)
const EventType_EVENT_TYPE_SCAN = EventType(puppet.EventType_EVENT_TYPE_SCAN)
const EventType_EVENT_TYPE_READY = EventType(puppet.EventType_EVENT_TYPE_READY)
const EventType_EVENT_TYPE_RESET = EventType(puppet.EventType_EVENT_TYPE_RESET)
const EventType_EVENT_TYPE_LOGIN = EventType(puppet.EventType_EVENT_TYPE_LOGIN)
const EventType_EVENT_TYPE_LOGOUT = EventType(puppet.EventType_EVENT_TYPE_LOGOUT)

// FriendshipPayloadRequest from public import puppet/friendship.proto
type FriendshipPayloadRequest = puppet.FriendshipPayloadRequest

// FriendshipPayloadResponse from public import puppet/friendship.proto
type FriendshipPayloadResponse = puppet.FriendshipPayloadResponse

// FriendshipSearchPhoneRequest from public import puppet/friendship.proto
type FriendshipSearchPhoneRequest = puppet.FriendshipSearchPhoneRequest

// FriendshipSearchPhoneResponse from public import puppet/friendship.proto
type FriendshipSearchPhoneResponse = puppet.FriendshipSearchPhoneResponse

// FriendshipSearchWeixinRequest from public import puppet/friendship.proto
type FriendshipSearchWeixinRequest = puppet.FriendshipSearchWeixinRequest

// FriendshipSearchWeixinResponse from public import puppet/friendship.proto
type FriendshipSearchWeixinResponse = puppet.FriendshipSearchWeixinResponse

// FriendshipAddRequest from public import puppet/friendship.proto
type FriendshipAddRequest = puppet.FriendshipAddRequest

// FriendshipAddResponse from public import puppet/friendship.proto
type FriendshipAddResponse = puppet.FriendshipAddResponse

// FriendshipAcceptRequest from public import puppet/friendship.proto
type FriendshipAcceptRequest = puppet.FriendshipAcceptRequest

// FriendshipAcceptResponse from public import puppet/friendship.proto
type FriendshipAcceptResponse = puppet.FriendshipAcceptResponse

// FriendshipType from public import puppet/friendship.proto
type FriendshipType = puppet.FriendshipType

var FriendshipType_name = puppet.FriendshipType_name
var FriendshipType_value = puppet.FriendshipType_value

const FriendshipType_FRIENDSHIP_TYPE_UNSPECIFIED = FriendshipType(puppet.FriendshipType_FRIENDSHIP_TYPE_UNSPECIFIED)
const FriendshipType_FRIENDSHIP_TYPE_CONFIRM = FriendshipType(puppet.FriendshipType_FRIENDSHIP_TYPE_CONFIRM)
const FriendshipType_FRIENDSHIP_TYPE_RECEIVE = FriendshipType(puppet.FriendshipType_FRIENDSHIP_TYPE_RECEIVE)
const FriendshipType_FRIENDSHIP_TYPE_VERIFY = FriendshipType(puppet.FriendshipType_FRIENDSHIP_TYPE_VERIFY)

// FriendshipSceneType from public import puppet/friendship.proto
type FriendshipSceneType = puppet.FriendshipSceneType

var FriendshipSceneType_name = puppet.FriendshipSceneType_name
var FriendshipSceneType_value = puppet.FriendshipSceneType_value

const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_UNSPECIFIED = FriendshipSceneType(puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_UNSPECIFIED)
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_QQ = FriendshipSceneType(puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_QQ)
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_EMAIL = FriendshipSceneType(puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_EMAIL)
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_WEIXIN = FriendshipSceneType(puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_WEIXIN)
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_QQTBD = FriendshipSceneType(puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_QQTBD)
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_ROOM = FriendshipSceneType(puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_ROOM)
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_PHONE = FriendshipSceneType(puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_PHONE)
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_CARD = FriendshipSceneType(puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_CARD)
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_LOCATION = FriendshipSceneType(puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_LOCATION)
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_BOTTLE = FriendshipSceneType(puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_BOTTLE)
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_SHAKING = FriendshipSceneType(puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_SHAKING)
const FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_QRCODE = FriendshipSceneType(puppet.FriendshipSceneType_FRIENDSHIP_SCENE_TYPE_QRCODE)

// MessagePayloadRequest from public import puppet/message.proto
type MessagePayloadRequest = puppet.MessagePayloadRequest

// MessagePayloadResponse from public import puppet/message.proto
type MessagePayloadResponse = puppet.MessagePayloadResponse

// MessageImageRequest from public import puppet/message.proto
type MessageImageRequest = puppet.MessageImageRequest

// MessageImageResponse from public import puppet/message.proto
type MessageImageResponse = puppet.MessageImageResponse

// MessageContactRequest from public import puppet/message.proto
type MessageContactRequest = puppet.MessageContactRequest

// MessageContactResponse from public import puppet/message.proto
type MessageContactResponse = puppet.MessageContactResponse

// MessageFileRequest from public import puppet/message.proto
type MessageFileRequest = puppet.MessageFileRequest

// MessageFileResponse from public import puppet/message.proto
type MessageFileResponse = puppet.MessageFileResponse

// MessageMiniProgramRequest from public import puppet/message.proto
type MessageMiniProgramRequest = puppet.MessageMiniProgramRequest

// MessageMiniProgramResponse from public import puppet/message.proto
type MessageMiniProgramResponse = puppet.MessageMiniProgramResponse

// MessageUrlRequest from public import puppet/message.proto
type MessageUrlRequest = puppet.MessageUrlRequest

// MessageUrlResponse from public import puppet/message.proto
type MessageUrlResponse = puppet.MessageUrlResponse

// MessageSendContactRequest from public import puppet/message.proto
type MessageSendContactRequest = puppet.MessageSendContactRequest

// MessageSendContactResponse from public import puppet/message.proto
type MessageSendContactResponse = puppet.MessageSendContactResponse

// MessageSendFileRequest from public import puppet/message.proto
type MessageSendFileRequest = puppet.MessageSendFileRequest

// MessageSendFileResponse from public import puppet/message.proto
type MessageSendFileResponse = puppet.MessageSendFileResponse

// MessageSendTextRequest from public import puppet/message.proto
type MessageSendTextRequest = puppet.MessageSendTextRequest

// MessageSendTextResponse from public import puppet/message.proto
type MessageSendTextResponse = puppet.MessageSendTextResponse

// MessageSendMiniProgramRequest from public import puppet/message.proto
type MessageSendMiniProgramRequest = puppet.MessageSendMiniProgramRequest

// MessageSendMiniProgramResponse from public import puppet/message.proto
type MessageSendMiniProgramResponse = puppet.MessageSendMiniProgramResponse

// MessageSendUrlRequest from public import puppet/message.proto
type MessageSendUrlRequest = puppet.MessageSendUrlRequest

// MessageSendUrlResponse from public import puppet/message.proto
type MessageSendUrlResponse = puppet.MessageSendUrlResponse

// MessageRecallRequest from public import puppet/message.proto
type MessageRecallRequest = puppet.MessageRecallRequest

// MessageRecallResponse from public import puppet/message.proto
type MessageRecallResponse = puppet.MessageRecallResponse

// MessageType from public import puppet/message.proto
type MessageType = puppet.MessageType

var MessageType_name = puppet.MessageType_name
var MessageType_value = puppet.MessageType_value

const MessageType_MESSAGE_TYPE_UNSPECIFIED = MessageType(puppet.MessageType_MESSAGE_TYPE_UNSPECIFIED)
const MessageType_MESSAGE_TYPE_ATTACHMENT = MessageType(puppet.MessageType_MESSAGE_TYPE_ATTACHMENT)
const MessageType_MESSAGE_TYPE_AUDIO = MessageType(puppet.MessageType_MESSAGE_TYPE_AUDIO)
const MessageType_MESSAGE_TYPE_CONTACT = MessageType(puppet.MessageType_MESSAGE_TYPE_CONTACT)
const MessageType_MESSAGE_TYPE_EMOTICON = MessageType(puppet.MessageType_MESSAGE_TYPE_EMOTICON)
const MessageType_MESSAGE_TYPE_IMAGE = MessageType(puppet.MessageType_MESSAGE_TYPE_IMAGE)
const MessageType_MESSAGE_TYPE_TEXT = MessageType(puppet.MessageType_MESSAGE_TYPE_TEXT)
const MessageType_MESSAGE_TYPE_VIDEO = MessageType(puppet.MessageType_MESSAGE_TYPE_VIDEO)
const MessageType_MESSAGE_TYPE_CHAT_HISTORY = MessageType(puppet.MessageType_MESSAGE_TYPE_CHAT_HISTORY)
const MessageType_MESSAGE_TYPE_LOCATION = MessageType(puppet.MessageType_MESSAGE_TYPE_LOCATION)
const MessageType_MESSAGE_TYPE_MINI_PROGRAM = MessageType(puppet.MessageType_MESSAGE_TYPE_MINI_PROGRAM)
const MessageType_MESSAGE_TYPE_TRANSFER = MessageType(puppet.MessageType_MESSAGE_TYPE_TRANSFER)
const MessageType_MESSAGE_TYPE_RED_ENVELOPE = MessageType(puppet.MessageType_MESSAGE_TYPE_RED_ENVELOPE)
const MessageType_MESSAGE_TYPE_RECALLED = MessageType(puppet.MessageType_MESSAGE_TYPE_RECALLED)
const MessageType_MESSAGE_TYPE_URL = MessageType(puppet.MessageType_MESSAGE_TYPE_URL)

// ImageType from public import puppet/message.proto
type ImageType = puppet.ImageType

var ImageType_name = puppet.ImageType_name
var ImageType_value = puppet.ImageType_value

const ImageType_IMAGE_TYPE_UNSPECIFIED = ImageType(puppet.ImageType_IMAGE_TYPE_UNSPECIFIED)
const ImageType_IMAGE_TYPE_THUMBNAIL = ImageType(puppet.ImageType_IMAGE_TYPE_THUMBNAIL)
const ImageType_IMAGE_TYPE_HD = ImageType(puppet.ImageType_IMAGE_TYPE_HD)
const ImageType_IMAGE_TYPE_ARTWORK = ImageType(puppet.ImageType_IMAGE_TYPE_ARTWORK)

// RoomListRequest from public import puppet/room.proto
type RoomListRequest = puppet.RoomListRequest

// RoomListResponse from public import puppet/room.proto
type RoomListResponse = puppet.RoomListResponse

// RoomPayloadRequest from public import puppet/room.proto
type RoomPayloadRequest = puppet.RoomPayloadRequest

// RoomPayloadResponse from public import puppet/room.proto
type RoomPayloadResponse = puppet.RoomPayloadResponse

// RoomAddRequest from public import puppet/room.proto
type RoomAddRequest = puppet.RoomAddRequest

// RoomAddResponse from public import puppet/room.proto
type RoomAddResponse = puppet.RoomAddResponse

// RoomAvatarRequest from public import puppet/room.proto
type RoomAvatarRequest = puppet.RoomAvatarRequest

// RoomAvatarResponse from public import puppet/room.proto
type RoomAvatarResponse = puppet.RoomAvatarResponse

// RoomCreateRequest from public import puppet/room.proto
type RoomCreateRequest = puppet.RoomCreateRequest

// RoomCreateResponse from public import puppet/room.proto
type RoomCreateResponse = puppet.RoomCreateResponse

// RoomDelRequest from public import puppet/room.proto
type RoomDelRequest = puppet.RoomDelRequest

// RoomDelResponse from public import puppet/room.proto
type RoomDelResponse = puppet.RoomDelResponse

// RoomQuitRequest from public import puppet/room.proto
type RoomQuitRequest = puppet.RoomQuitRequest

// RoomQuitResponse from public import puppet/room.proto
type RoomQuitResponse = puppet.RoomQuitResponse

// RoomTopicRequest from public import puppet/room.proto
type RoomTopicRequest = puppet.RoomTopicRequest

// RoomTopicResponse from public import puppet/room.proto
type RoomTopicResponse = puppet.RoomTopicResponse

// RoomQRCodeRequest from public import puppet/room.proto
type RoomQRCodeRequest = puppet.RoomQRCodeRequest

// RoomQRCodeResponse from public import puppet/room.proto
type RoomQRCodeResponse = puppet.RoomQRCodeResponse

// RoomAnnounceRequest from public import puppet/room.proto
type RoomAnnounceRequest = puppet.RoomAnnounceRequest

// RoomAnnounceResponse from public import puppet/room.proto
type RoomAnnounceResponse = puppet.RoomAnnounceResponse

// RoomInvitationPayloadRequest from public import puppet/room_invitation.proto
type RoomInvitationPayloadRequest = puppet.RoomInvitationPayloadRequest

// RoomInvitationPayloadResponse from public import puppet/room_invitation.proto
type RoomInvitationPayloadResponse = puppet.RoomInvitationPayloadResponse

// RoomInvitationAcceptRequest from public import puppet/room_invitation.proto
type RoomInvitationAcceptRequest = puppet.RoomInvitationAcceptRequest

// RoomInvitationAcceptResponse from public import puppet/room_invitation.proto
type RoomInvitationAcceptResponse = puppet.RoomInvitationAcceptResponse

// RoomMemberPayloadRequest from public import puppet/room_member.proto
type RoomMemberPayloadRequest = puppet.RoomMemberPayloadRequest

// RoomMemberPayloadResponse from public import puppet/room_member.proto
type RoomMemberPayloadResponse = puppet.RoomMemberPayloadResponse

// RoomMemberListRequest from public import puppet/room_member.proto
type RoomMemberListRequest = puppet.RoomMemberListRequest

// RoomMemberListResponse from public import puppet/room_member.proto
type RoomMemberListResponse = puppet.RoomMemberListResponse

// TagContactAddRequest from public import puppet/tag.proto
type TagContactAddRequest = puppet.TagContactAddRequest

// TagContactAddResponse from public import puppet/tag.proto
type TagContactAddResponse = puppet.TagContactAddResponse

// TagContactRemoveRequest from public import puppet/tag.proto
type TagContactRemoveRequest = puppet.TagContactRemoveRequest

// TagContactRemoveResponse from public import puppet/tag.proto
type TagContactRemoveResponse = puppet.TagContactRemoveResponse

// TagContactDeleteRequest from public import puppet/tag.proto
type TagContactDeleteRequest = puppet.TagContactDeleteRequest

// TagContactDeleteResponse from public import puppet/tag.proto
type TagContactDeleteResponse = puppet.TagContactDeleteResponse

// TagContactListRequest from public import puppet/tag.proto
type TagContactListRequest = puppet.TagContactListRequest

// TagContactListResponse from public import puppet/tag.proto
type TagContactListResponse = puppet.TagContactListResponse

func init() { proto.RegisterFile("puppet.proto", fileDescriptor_ea67cb507bb1d4ef) }

var fileDescriptor_ea67cb507bb1d4ef = []byte{
	// 1023 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x98, 0x6f, 0x73, 0xdc, 0x34,
	0x10, 0xc6, 0x5b, 0x68, 0x92, 0x22, 0x0a, 0x6d, 0x34, 0xe5, 0xcf, 0x84, 0xd0, 0x90, 0x6b, 0x73,
	0x69, 0x69, 0x7a, 0x30, 0xf0, 0x09, 0x3a, 0x09, 0x19, 0x32, 0x93, 0x80, 0x7b, 0x97, 0x00, 0x33,
	0xcc, 0xc0, 0x28, 0x3e, 0xc5, 0xa7, 0x8e, 0x6d, 0x19, 0x5b, 0x77, 0x24, 0xef, 0xf8, 0xe8, 0x8c,
	0x6d, 0x49, 0xb7, 0xb6, 0xb5, 0xb2, 0xdf, 0xee, 0xf3, 0xdb, 0x67, 0x4f, 0xf6, 0x4a, 0x5a, 0x1f,
	0x79, 0x94, 0x2d, 0xb3, 0x8c, 0xab, 0x49, 0x96, 0x4b, 0x25, 0xe9, 0xd6, 0xbf, 0x3c, 0x5c, 0x30,
	0x75, 0xb7, 0xb3, 0x5d, 0x87, 0xbf, 0xbb, 0x66, 0x05, 0xaf, 0xb5, 0x9d, 0xa7, 0x3a, 0x14, 0xca,
	0x54, 0xb1, 0x50, 0x67, 0xec, 0x50, 0x1d, 0xe5, 0x2b, 0x9e, 0x9a, 0xd8, 0x17, 0x3a, 0x76, 0x93,
	0x0b, 0x9e, 0xce, 0x8b, 0x85, 0xc8, 0x5a, 0x16, 0x09, 0x2f, 0x0a, 0x16, 0x19, 0x63, 0x53, 0x2b,
	0x97, 0x32, 0xd1, 0xa1, 0x5d, 0x10, 0xfa, 0x5b, 0xa4, 0x2b, 0xa1, 0x98, 0x12, 0x32, 0xd5, 0xea,
	0x97, 0x50, 0x4d, 0x78, 0x72, 0xcd, 0x73, 0xad, 0x3c, 0xd1, 0x8a, 0x62, 0x51, 0x1d, 0xf9, 0xe1,
	0xbf, 0x17, 0x64, 0x33, 0xa8, 0x82, 0xf4, 0x94, 0x6c, 0xcc, 0x14, 0xcb, 0x15, 0xdd, 0x9d, 0xe8,
	0x65, 0x4e, 0xf4, 0xe2, 0xab, 0xf0, 0x94, 0xff, 0xb3, 0xe4, 0x85, 0xda, 0xf9, 0x1a, 0x51, 0x8b,
	0x4c, 0xa6, 0x05, 0x1f, 0xdd, 0xa3, 0xc7, 0xe4, 0xc1, 0x4c, 0xc9, 0x8c, 0x7e, 0xd5, 0x05, 0x65,
	0x66, 0x5c, 0x76, 0xdd, 0xa2, 0x35, 0x39, 0x23, 0x9b, 0xe7, 0x32, 0x92, 0x4b, 0x45, 0x3b, 0xf5,
	0xea, 0xb8, 0x31, 0x7a, 0x86, 0xc9, 0xf0, 0xf7, 0x9c, 0x88, 0x34, 0xea, 0xfe, 0x9e, 0x32, 0x8a,
	0xfe, 0x9e, 0x5a, 0xb4, 0x26, 0xe7, 0x64, 0xeb, 0x37, 0x9e, 0x17, 0x42, 0xa6, 0xb4, 0x53, 0x51,
	0x0b, 0xc6, 0x6a, 0x0f, 0xd5, 0xad, 0xdb, 0xcf, 0x64, 0xe3, 0xa7, 0xb2, 0x21, 0xba, 0x8f, 0xba,
	0x0a, 0xa3, 0x8f, 0x5a, 0xab, 0xc6, 0xe7, 0xfb, 0xfb, 0xf4, 0x3d, 0xd9, 0x3e, 0xae, 0x1b, 0x6e,
	0xc6, 0xe3, 0x9b, 0x77, 0xd3, 0x63, 0x39, 0xe7, 0xf4, 0x65, 0x3b, 0xaf, 0x83, 0x98, 0x0a, 0xaf,
	0x06, 0x90, 0xf6, 0x57, 0xcf, 0xc9, 0x63, 0x20, 0xff, 0xc2, 0x12, 0x4e, 0xc7, 0x9e, 0xfc, 0x12,
	0x30, 0x75, 0x0e, 0x7b, 0x39, 0x5b, 0xa5, 0x20, 0x4f, 0x81, 0x38, 0x13, 0x51, 0xca, 0xd4, 0x32,
	0xe7, 0xf4, 0xb5, 0xc7, 0xc2, 0x52, 0xa6, 0xde, 0xd1, 0x30, 0xd8, 0x16, 0x65, 0xe4, 0x53, 0x4d,
	0x04, 0xec, 0x2e, 0x96, 0x6c, 0x4e, 0x0f, 0x10, 0x07, 0xad, 0x9b, 0x42, 0xe3, 0x3e, 0xcc, 0x96,
	0xf8, 0x93, 0x3c, 0xd2, 0xda, 0xdb, 0x58, 0xb0, 0x82, 0x3e, 0x47, 0x32, 0x2b, 0xd5, 0xd8, 0xbf,
	0xf0, 0x43, 0xd6, 0xfc, 0x2f, 0xf2, 0x89, 0x51, 0x56, 0x4c, 0xb1, 0x9c, 0xa2, 0x89, 0x95, 0x6c,
	0xec, 0x0f, 0x7a, 0x28, 0xeb, 0xff, 0x07, 0xf9, 0x58, 0x4b, 0xe7, 0xa2, 0x50, 0x74, 0x84, 0xe4,
	0x95, 0xa2, 0xf1, 0x7e, 0xee, 0x65, 0xac, 0xf3, 0x7b, 0xb2, 0x7d, 0x6a, 0xcf, 0x41, 0xf3, 0xf0,
	0x3b, 0x0d, 0xdc, 0x41, 0xd0, 0x06, 0x76, 0x90, 0xb6, 0xd6, 0x8a, 0x7c, 0xb6, 0x96, 0x67, 0x9c,
	0xe5, 0xe1, 0x22, 0x58, 0xc8, 0x94, 0xd3, 0x23, 0xdc, 0x05, 0x60, 0xa6, 0xe6, 0x9b, 0x81, 0xb4,
	0xad, 0x7b, 0x47, 0x3e, 0x6f, 0x23, 0xbf, 0x73, 0x71, 0x2b, 0x52, 0xda, 0x6b, 0x55, 0x73, 0xa6,
	0xf2, 0x64, 0x28, 0x0e, 0x1b, 0x63, 0xcd, 0xbc, 0x9d, 0xcf, 0xbb, 0x8d, 0xd1, 0x90, 0xd1, 0xc6,
	0x68, 0x51, 0xd6, 0xff, 0x86, 0x3c, 0x3e, 0xcd, 0x8d, 0x12, 0x86, 0x3c, 0x53, 0xf4, 0xd0, 0x93,
	0x5b, 0x11, 0xa6, 0xc8, 0xcb, 0x7e, 0x10, 0x6e, 0xd0, 0x8b, 0xfa, 0x56, 0x44, 0x37, 0x68, 0x53,
	0x47, 0x37, 0x68, 0x1b, 0x73, 0x94, 0xd0, 0x9d, 0x8a, 0x96, 0xd0, 0x7a, 0x5f, 0x09, 0x8b, 0xc1,
	0x6d, 0xa4, 0xb5, 0x53, 0x11, 0xf3, 0xee, 0x36, 0x02, 0x22, 0xba, 0x8d, 0x1a, 0x0c, 0x3c, 0x5d,
	0xb4, 0x70, 0x96, 0xb0, 0x88, 0x53, 0x2c, 0xad, 0x52, 0xd1, 0xd3, 0xa5, 0x09, 0x59, 0xf3, 0x84,
	0x50, 0xad, 0x5c, 0x88, 0x54, 0x04, 0xb9, 0x8c, 0x72, 0x96, 0xd0, 0x57, 0x48, 0x36, 0x60, 0x4c,
	0xa1, 0x6f, 0x87, 0xa0, 0xb6, 0xdc, 0x15, 0x21, 0x5a, 0xbf, 0xca, 0x63, 0xba, 0x8f, 0xe4, 0x5e,
	0xe5, 0xb1, 0xb1, 0x1f, 0xf9, 0x10, 0xc7, 0x2a, 0x66, 0x3c, 0x9d, 0x9b, 0x77, 0x8c, 0xad, 0x02,
	0x30, 0x7d, 0xab, 0x68, 0xa0, 0xf0, 0xb6, 0x04, 0x7a, 0xf5, 0xbe, 0xc7, 0x1e, 0x03, 0xf8, 0xce,
	0x0f, 0x7b, 0x39, 0xa4, 0xca, 0x25, 0xbf, 0x55, 0xde, 0x2a, 0x25, 0x30, 0xa4, 0x4a, 0xcd, 0xc1,
	0x03, 0x0c, 0x88, 0xb0, 0x09, 0xde, 0x78, 0x4c, 0x1c, 0x8d, 0x30, 0x19, 0x8a, 0x3b, 0x76, 0x65,
	0xc9, 0x94, 0x0d, 0x71, 0xe0, 0xf1, 0x00, 0x4d, 0x31, 0xee, 0xc3, 0xe0, 0x19, 0xa9, 0xb5, 0x29,
	0x0f, 0x59, 0x1c, 0x53, 0x6c, 0x5f, 0xd4, 0x32, 0x7a, 0x46, 0xb6, 0x28, 0xb8, 0xeb, 0xa7, 0x52,
	0x26, 0xe6, 0xe0, 0xea, 0x74, 0x2b, 0x10, 0xd1, 0x5d, 0xdf, 0x60, 0xac, 0xf3, 0xaf, 0xe4, 0x61,
	0x29, 0x54, 0x77, 0xf2, 0x9e, 0x2b, 0x05, 0x5e, 0xc8, 0xdf, 0xe0, 0x00, 0x1c, 0x73, 0xcb, 0x68,
	0x79, 0x51, 0x3c, 0x73, 0xe1, 0xe0, 0x8a, 0xd8, 0x43, 0x75, 0xb8, 0x91, 0xab, 0x60, 0x3d, 0x92,
	0xec, 0x3b, 0x13, 0x1a, 0xf3, 0xc8, 0xc8, 0x87, 0xb4, 0x6d, 0x8f, 0x73, 0xce, 0x14, 0x77, 0xdb,
	0xd6, 0x9a, 0xd7, 0xd6, 0x20, 0xed, 0xb5, 0x9f, 0xf0, 0xd8, 0xbd, 0xf6, 0x13, 0x1e, 0x7b, 0xd7,
	0x5e, 0xe9, 0xed, 0x57, 0xf3, 0x6e, 0x29, 0x90, 0x57, 0x53, 0x2a, 0xde, 0x57, 0x53, 0x03, 0xd6,
	0x70, 0x4a, 0x3e, 0x2a, 0xa3, 0x97, 0x32, 0x13, 0x21, 0x75, 0x26, 0x54, 0x92, 0xb1, 0xdc, 0xf7,
	0x10, 0xed, 0x27, 0xa9, 0x3f, 0x1b, 0x9c, 0x29, 0xcd, 0xef, 0x85, 0x91, 0x0f, 0x81, 0x97, 0x51,
	0xf5, 0xe2, 0xd2, 0x54, 0x2e, 0xd3, 0xd0, 0x71, 0x19, 0x41, 0x15, 0xbd, 0x8c, 0x9a, 0x10, 0x1c,
	0x18, 0x4b, 0xe5, 0xa2, 0xfa, 0xae, 0x45, 0x07, 0xc6, 0x0e, 0x82, 0x0e, 0x8c, 0x0e, 0x12, 0x1e,
	0x3e, 0x6b, 0xb9, 0xda, 0x65, 0x07, 0x78, 0x3a, 0xdc, 0x6b, 0xe3, 0x3e, 0x0c, 0xce, 0xa4, 0xa5,
	0x76, 0x66, 0x3f, 0xe2, 0xcd, 0x92, 0x8e, 0x5c, 0x16, 0x1d, 0x0c, 0x9d, 0x49, 0x11, 0x1a, 0x7e,
	0x66, 0x35, 0x11, 0x3d, 0xbd, 0xbd, 0xf6, 0x1b, 0x35, 0x27, 0xb8, 0xa3, 0x61, 0x30, 0x3c, 0x69,
	0x2f, 0x59, 0x64, 0x3e, 0x32, 0x5c, 0xd3, 0x68, 0x43, 0x46, 0x4f, 0xda, 0x16, 0x65, 0xfd, 0x23,
	0xf2, 0x64, 0x2d, 0x4d, 0x79, 0x22, 0x57, 0xbc, 0x3b, 0x8e, 0xb6, 0x09, 0x74, 0x1c, 0xed, 0x82,
	0xee, 0x42, 0x27, 0x3c, 0xe6, 0xca, 0x5b, 0xa8, 0x26, 0x06, 0x14, 0x32, 0x20, 0xec, 0xc0, 0xb5,
	0xea, 0xee, 0xc0, 0xa6, 0x8e, 0x76, 0x60, 0x1b, 0x33, 0x25, 0x82, 0x7b, 0xc1, 0xfd, 0xe0, 0x83,
	0xe0, 0xc3, 0xe0, 0x41, 0xb0, 0x11, 0x6c, 0x06, 0x5b, 0xc1, 0xc3, 0xeb, 0xcd, 0xea, 0xbf, 0xa1,
	0x1f, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x88, 0xd4, 0xf3, 0xf2, 0xfd, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PuppetClient is the client API for Puppet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PuppetClient interface {
	//*
	//
	// Base
	//
	Start(ctx context.Context, in *puppet.StartRequest, opts ...grpc.CallOption) (*puppet.StartResponse, error)
	Stop(ctx context.Context, in *puppet.StopRequest, opts ...grpc.CallOption) (*puppet.StopResponse, error)
	Logout(ctx context.Context, in *puppet.LogoutRequest, opts ...grpc.CallOption) (*puppet.LogoutResponse, error)
	Ding(ctx context.Context, in *puppet.DingRequest, opts ...grpc.CallOption) (*puppet.DingResponse, error)
	Version(ctx context.Context, in *puppet.VersionRequest, opts ...grpc.CallOption) (*puppet.VersionResponse, error)
	//*
	//
	// Event - Server Stream
	//
	Event(ctx context.Context, in *puppet.EventRequest, opts ...grpc.CallOption) (Puppet_EventClient, error)
	//*
	//
	// Contact Self
	//
	ContactSelfQRCode(ctx context.Context, in *puppet.ContactSelfQRCodeRequest, opts ...grpc.CallOption) (*puppet.ContactSelfQRCodeResponse, error)
	ContactSelfName(ctx context.Context, in *puppet.ContactSelfNameRequest, opts ...grpc.CallOption) (*puppet.ContactSelfNameResponse, error)
	ContactSelfSignature(ctx context.Context, in *puppet.ContactSelfSignatureRequest, opts ...grpc.CallOption) (*puppet.ContactSelfSignatureResponse, error)
	//*
	//
	// Contact
	//
	ContactPayload(ctx context.Context, in *puppet.ContactPayloadRequest, opts ...grpc.CallOption) (*puppet.ContactPayloadResponse, error)
	ContactAlias(ctx context.Context, in *puppet.ContactAliasRequest, opts ...grpc.CallOption) (*puppet.ContactAliasResponse, error)
	ContactAvatar(ctx context.Context, in *puppet.ContactAvatarRequest, opts ...grpc.CallOption) (*puppet.ContactAvatarResponse, error)
	ContactList(ctx context.Context, in *puppet.ContactListRequest, opts ...grpc.CallOption) (*puppet.ContactListResponse, error)
	//*
	//
	// Friendship
	//
	FriendshipPayload(ctx context.Context, in *puppet.FriendshipPayloadRequest, opts ...grpc.CallOption) (*puppet.FriendshipPayloadResponse, error)
	FriendshipSearchPhone(ctx context.Context, in *puppet.FriendshipSearchPhoneRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchPhoneResponse, error)
	FriendshipSearchWeixin(ctx context.Context, in *puppet.FriendshipSearchWeixinRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchWeixinResponse, error)
	FriendshipAdd(ctx context.Context, in *puppet.FriendshipAddRequest, opts ...grpc.CallOption) (*puppet.FriendshipAddResponse, error)
	FrendshipAccept(ctx context.Context, in *puppet.FriendshipAcceptRequest, opts ...grpc.CallOption) (*puppet.FriendshipAcceptResponse, error)
	//*
	//
	// Message
	//
	MessagePayload(ctx context.Context, in *puppet.MessagePayloadRequest, opts ...grpc.CallOption) (*puppet.MessagePayloadResponse, error)
	MessageContact(ctx context.Context, in *puppet.MessageContactRequest, opts ...grpc.CallOption) (*puppet.MessageContactResponse, error)
	MessageFile(ctx context.Context, in *puppet.MessageFileRequest, opts ...grpc.CallOption) (*puppet.MessageFileResponse, error)
	MessageImage(ctx context.Context, in *puppet.MessageImageRequest, opts ...grpc.CallOption) (*puppet.MessageImageResponse, error)
	MessageMiniProgram(ctx context.Context, in *puppet.MessageMiniProgramRequest, opts ...grpc.CallOption) (*puppet.MessageMiniProgramResponse, error)
	MessageUrl(ctx context.Context, in *puppet.MessageUrlRequest, opts ...grpc.CallOption) (*puppet.MessageUrlResponse, error)
	MessageSendContact(ctx context.Context, in *puppet.MessageSendContactRequest, opts ...grpc.CallOption) (*puppet.MessageSendContactResponse, error)
	MessageSendFile(ctx context.Context, in *puppet.MessageSendFileRequest, opts ...grpc.CallOption) (*puppet.MessageSendFileResponse, error)
	MessageSendText(ctx context.Context, in *puppet.MessageSendTextRequest, opts ...grpc.CallOption) (*puppet.MessageSendTextResponse, error)
	MessageSendMiniProgram(ctx context.Context, in *puppet.MessageSendMiniProgramRequest, opts ...grpc.CallOption) (*puppet.MessageSendMiniProgramResponse, error)
	MessageSendUrl(ctx context.Context, in *puppet.MessageSendUrlRequest, opts ...grpc.CallOption) (*puppet.MessageSendUrlResponse, error)
	MessageRecall(ctx context.Context, in *puppet.MessageRecallRequest, opts ...grpc.CallOption) (*puppet.MessageRecallResponse, error)
	//*
	//
	// Room
	//
	RoomPayload(ctx context.Context, in *puppet.RoomPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomPayloadResponse, error)
	RoomList(ctx context.Context, in *puppet.RoomListRequest, opts ...grpc.CallOption) (*puppet.RoomListResponse, error)
	RoomAdd(ctx context.Context, in *puppet.RoomAddRequest, opts ...grpc.CallOption) (*puppet.RoomAddResponse, error)
	RoomAvatar(ctx context.Context, in *puppet.RoomAvatarRequest, opts ...grpc.CallOption) (*puppet.RoomAvatarResponse, error)
	RoomCreate(ctx context.Context, in *puppet.RoomCreateRequest, opts ...grpc.CallOption) (*puppet.RoomCreateResponse, error)
	RoomDel(ctx context.Context, in *puppet.RoomDelRequest, opts ...grpc.CallOption) (*puppet.RoomDelResponse, error)
	RoomQuit(ctx context.Context, in *puppet.RoomQuitRequest, opts ...grpc.CallOption) (*puppet.RoomQuitResponse, error)
	RoomTopic(ctx context.Context, in *puppet.RoomTopicRequest, opts ...grpc.CallOption) (*puppet.RoomTopicResponse, error)
	RoomQRCode(ctx context.Context, in *puppet.RoomQRCodeRequest, opts ...grpc.CallOption) (*puppet.RoomQRCodeResponse, error)
	RoomAnnounce(ctx context.Context, in *puppet.RoomAnnounceRequest, opts ...grpc.CallOption) (*puppet.RoomAnnounceResponse, error)
	//*
	//
	// Room Member
	//
	RoomMemberPayload(ctx context.Context, in *puppet.RoomMemberPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomMemberPayloadResponse, error)
	RoomMemberList(ctx context.Context, in *puppet.RoomMemberListRequest, opts ...grpc.CallOption) (*puppet.RoomMemberListResponse, error)
	//*
	//
	// Room Invitation
	//
	RoomInvitationPayload(ctx context.Context, in *puppet.RoomInvitationPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomInvitationPayloadResponse, error)
	RoomInvitationAccept(ctx context.Context, in *puppet.RoomInvitationAcceptRequest, opts ...grpc.CallOption) (*puppet.RoomInvitationAcceptResponse, error)
	//*
	//
	// Tag
	//
	TagContactAdd(ctx context.Context, in *puppet.TagContactAddRequest, opts ...grpc.CallOption) (*puppet.TagContactAddResponse, error)
	TagContactRemove(ctx context.Context, in *puppet.TagContactRemoveRequest, opts ...grpc.CallOption) (*puppet.TagContactRemoveResponse, error)
	TagContactDelete(ctx context.Context, in *puppet.TagContactDeleteRequest, opts ...grpc.CallOption) (*puppet.TagContactDeleteResponse, error)
	TagContactList(ctx context.Context, in *puppet.TagContactListRequest, opts ...grpc.CallOption) (*puppet.TagContactListResponse, error)
}

type puppetClient struct {
	cc *grpc.ClientConn
}

func NewPuppetClient(cc *grpc.ClientConn) PuppetClient {
	return &puppetClient{cc}
}

func (c *puppetClient) Start(ctx context.Context, in *puppet.StartRequest, opts ...grpc.CallOption) (*puppet.StartResponse, error) {
	out := new(puppet.StartResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Stop(ctx context.Context, in *puppet.StopRequest, opts ...grpc.CallOption) (*puppet.StopResponse, error) {
	out := new(puppet.StopResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Logout(ctx context.Context, in *puppet.LogoutRequest, opts ...grpc.CallOption) (*puppet.LogoutResponse, error) {
	out := new(puppet.LogoutResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Ding(ctx context.Context, in *puppet.DingRequest, opts ...grpc.CallOption) (*puppet.DingResponse, error) {
	out := new(puppet.DingResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Ding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Version(ctx context.Context, in *puppet.VersionRequest, opts ...grpc.CallOption) (*puppet.VersionResponse, error) {
	out := new(puppet.VersionResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) Event(ctx context.Context, in *puppet.EventRequest, opts ...grpc.CallOption) (Puppet_EventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Puppet_serviceDesc.Streams[0], "/wechaty.Puppet/Event", opts...)
	if err != nil {
		return nil, err
	}
	x := &puppetEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Puppet_EventClient interface {
	Recv() (*puppet.EventResponse, error)
	grpc.ClientStream
}

type puppetEventClient struct {
	grpc.ClientStream
}

func (x *puppetEventClient) Recv() (*puppet.EventResponse, error) {
	m := new(puppet.EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *puppetClient) ContactSelfQRCode(ctx context.Context, in *puppet.ContactSelfQRCodeRequest, opts ...grpc.CallOption) (*puppet.ContactSelfQRCodeResponse, error) {
	out := new(puppet.ContactSelfQRCodeResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactSelfQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactSelfName(ctx context.Context, in *puppet.ContactSelfNameRequest, opts ...grpc.CallOption) (*puppet.ContactSelfNameResponse, error) {
	out := new(puppet.ContactSelfNameResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactSelfName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactSelfSignature(ctx context.Context, in *puppet.ContactSelfSignatureRequest, opts ...grpc.CallOption) (*puppet.ContactSelfSignatureResponse, error) {
	out := new(puppet.ContactSelfSignatureResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactSelfSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactPayload(ctx context.Context, in *puppet.ContactPayloadRequest, opts ...grpc.CallOption) (*puppet.ContactPayloadResponse, error) {
	out := new(puppet.ContactPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactAlias(ctx context.Context, in *puppet.ContactAliasRequest, opts ...grpc.CallOption) (*puppet.ContactAliasResponse, error) {
	out := new(puppet.ContactAliasResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactAlias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactAvatar(ctx context.Context, in *puppet.ContactAvatarRequest, opts ...grpc.CallOption) (*puppet.ContactAvatarResponse, error) {
	out := new(puppet.ContactAvatarResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) ContactList(ctx context.Context, in *puppet.ContactListRequest, opts ...grpc.CallOption) (*puppet.ContactListResponse, error) {
	out := new(puppet.ContactListResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/ContactList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipPayload(ctx context.Context, in *puppet.FriendshipPayloadRequest, opts ...grpc.CallOption) (*puppet.FriendshipPayloadResponse, error) {
	out := new(puppet.FriendshipPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipSearchPhone(ctx context.Context, in *puppet.FriendshipSearchPhoneRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchPhoneResponse, error) {
	out := new(puppet.FriendshipSearchPhoneResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipSearchPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipSearchWeixin(ctx context.Context, in *puppet.FriendshipSearchWeixinRequest, opts ...grpc.CallOption) (*puppet.FriendshipSearchWeixinResponse, error) {
	out := new(puppet.FriendshipSearchWeixinResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipSearchWeixin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FriendshipAdd(ctx context.Context, in *puppet.FriendshipAddRequest, opts ...grpc.CallOption) (*puppet.FriendshipAddResponse, error) {
	out := new(puppet.FriendshipAddResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FriendshipAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) FrendshipAccept(ctx context.Context, in *puppet.FriendshipAcceptRequest, opts ...grpc.CallOption) (*puppet.FriendshipAcceptResponse, error) {
	out := new(puppet.FriendshipAcceptResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/FrendshipAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessagePayload(ctx context.Context, in *puppet.MessagePayloadRequest, opts ...grpc.CallOption) (*puppet.MessagePayloadResponse, error) {
	out := new(puppet.MessagePayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessagePayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageContact(ctx context.Context, in *puppet.MessageContactRequest, opts ...grpc.CallOption) (*puppet.MessageContactResponse, error) {
	out := new(puppet.MessageContactResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageFile(ctx context.Context, in *puppet.MessageFileRequest, opts ...grpc.CallOption) (*puppet.MessageFileResponse, error) {
	out := new(puppet.MessageFileResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageImage(ctx context.Context, in *puppet.MessageImageRequest, opts ...grpc.CallOption) (*puppet.MessageImageResponse, error) {
	out := new(puppet.MessageImageResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageMiniProgram(ctx context.Context, in *puppet.MessageMiniProgramRequest, opts ...grpc.CallOption) (*puppet.MessageMiniProgramResponse, error) {
	out := new(puppet.MessageMiniProgramResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageMiniProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageUrl(ctx context.Context, in *puppet.MessageUrlRequest, opts ...grpc.CallOption) (*puppet.MessageUrlResponse, error) {
	out := new(puppet.MessageUrlResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendContact(ctx context.Context, in *puppet.MessageSendContactRequest, opts ...grpc.CallOption) (*puppet.MessageSendContactResponse, error) {
	out := new(puppet.MessageSendContactResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendFile(ctx context.Context, in *puppet.MessageSendFileRequest, opts ...grpc.CallOption) (*puppet.MessageSendFileResponse, error) {
	out := new(puppet.MessageSendFileResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendText(ctx context.Context, in *puppet.MessageSendTextRequest, opts ...grpc.CallOption) (*puppet.MessageSendTextResponse, error) {
	out := new(puppet.MessageSendTextResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendMiniProgram(ctx context.Context, in *puppet.MessageSendMiniProgramRequest, opts ...grpc.CallOption) (*puppet.MessageSendMiniProgramResponse, error) {
	out := new(puppet.MessageSendMiniProgramResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendMiniProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageSendUrl(ctx context.Context, in *puppet.MessageSendUrlRequest, opts ...grpc.CallOption) (*puppet.MessageSendUrlResponse, error) {
	out := new(puppet.MessageSendUrlResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageSendUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) MessageRecall(ctx context.Context, in *puppet.MessageRecallRequest, opts ...grpc.CallOption) (*puppet.MessageRecallResponse, error) {
	out := new(puppet.MessageRecallResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/MessageRecall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomPayload(ctx context.Context, in *puppet.RoomPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomPayloadResponse, error) {
	out := new(puppet.RoomPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomList(ctx context.Context, in *puppet.RoomListRequest, opts ...grpc.CallOption) (*puppet.RoomListResponse, error) {
	out := new(puppet.RoomListResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomAdd(ctx context.Context, in *puppet.RoomAddRequest, opts ...grpc.CallOption) (*puppet.RoomAddResponse, error) {
	out := new(puppet.RoomAddResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomAvatar(ctx context.Context, in *puppet.RoomAvatarRequest, opts ...grpc.CallOption) (*puppet.RoomAvatarResponse, error) {
	out := new(puppet.RoomAvatarResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomCreate(ctx context.Context, in *puppet.RoomCreateRequest, opts ...grpc.CallOption) (*puppet.RoomCreateResponse, error) {
	out := new(puppet.RoomCreateResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomDel(ctx context.Context, in *puppet.RoomDelRequest, opts ...grpc.CallOption) (*puppet.RoomDelResponse, error) {
	out := new(puppet.RoomDelResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomQuit(ctx context.Context, in *puppet.RoomQuitRequest, opts ...grpc.CallOption) (*puppet.RoomQuitResponse, error) {
	out := new(puppet.RoomQuitResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomQuit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomTopic(ctx context.Context, in *puppet.RoomTopicRequest, opts ...grpc.CallOption) (*puppet.RoomTopicResponse, error) {
	out := new(puppet.RoomTopicResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomQRCode(ctx context.Context, in *puppet.RoomQRCodeRequest, opts ...grpc.CallOption) (*puppet.RoomQRCodeResponse, error) {
	out := new(puppet.RoomQRCodeResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomAnnounce(ctx context.Context, in *puppet.RoomAnnounceRequest, opts ...grpc.CallOption) (*puppet.RoomAnnounceResponse, error) {
	out := new(puppet.RoomAnnounceResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomAnnounce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomMemberPayload(ctx context.Context, in *puppet.RoomMemberPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomMemberPayloadResponse, error) {
	out := new(puppet.RoomMemberPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomMemberPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomMemberList(ctx context.Context, in *puppet.RoomMemberListRequest, opts ...grpc.CallOption) (*puppet.RoomMemberListResponse, error) {
	out := new(puppet.RoomMemberListResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomMemberList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomInvitationPayload(ctx context.Context, in *puppet.RoomInvitationPayloadRequest, opts ...grpc.CallOption) (*puppet.RoomInvitationPayloadResponse, error) {
	out := new(puppet.RoomInvitationPayloadResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomInvitationPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) RoomInvitationAccept(ctx context.Context, in *puppet.RoomInvitationAcceptRequest, opts ...grpc.CallOption) (*puppet.RoomInvitationAcceptResponse, error) {
	out := new(puppet.RoomInvitationAcceptResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/RoomInvitationAccept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) TagContactAdd(ctx context.Context, in *puppet.TagContactAddRequest, opts ...grpc.CallOption) (*puppet.TagContactAddResponse, error) {
	out := new(puppet.TagContactAddResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/TagContactAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) TagContactRemove(ctx context.Context, in *puppet.TagContactRemoveRequest, opts ...grpc.CallOption) (*puppet.TagContactRemoveResponse, error) {
	out := new(puppet.TagContactRemoveResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/TagContactRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) TagContactDelete(ctx context.Context, in *puppet.TagContactDeleteRequest, opts ...grpc.CallOption) (*puppet.TagContactDeleteResponse, error) {
	out := new(puppet.TagContactDeleteResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/TagContactDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *puppetClient) TagContactList(ctx context.Context, in *puppet.TagContactListRequest, opts ...grpc.CallOption) (*puppet.TagContactListResponse, error) {
	out := new(puppet.TagContactListResponse)
	err := c.cc.Invoke(ctx, "/wechaty.Puppet/TagContactList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PuppetServer is the server API for Puppet service.
type PuppetServer interface {
	//*
	//
	// Base
	//
	Start(context.Context, *puppet.StartRequest) (*puppet.StartResponse, error)
	Stop(context.Context, *puppet.StopRequest) (*puppet.StopResponse, error)
	Logout(context.Context, *puppet.LogoutRequest) (*puppet.LogoutResponse, error)
	Ding(context.Context, *puppet.DingRequest) (*puppet.DingResponse, error)
	Version(context.Context, *puppet.VersionRequest) (*puppet.VersionResponse, error)
	//*
	//
	// Event - Server Stream
	//
	Event(*puppet.EventRequest, Puppet_EventServer) error
	//*
	//
	// Contact Self
	//
	ContactSelfQRCode(context.Context, *puppet.ContactSelfQRCodeRequest) (*puppet.ContactSelfQRCodeResponse, error)
	ContactSelfName(context.Context, *puppet.ContactSelfNameRequest) (*puppet.ContactSelfNameResponse, error)
	ContactSelfSignature(context.Context, *puppet.ContactSelfSignatureRequest) (*puppet.ContactSelfSignatureResponse, error)
	//*
	//
	// Contact
	//
	ContactPayload(context.Context, *puppet.ContactPayloadRequest) (*puppet.ContactPayloadResponse, error)
	ContactAlias(context.Context, *puppet.ContactAliasRequest) (*puppet.ContactAliasResponse, error)
	ContactAvatar(context.Context, *puppet.ContactAvatarRequest) (*puppet.ContactAvatarResponse, error)
	ContactList(context.Context, *puppet.ContactListRequest) (*puppet.ContactListResponse, error)
	//*
	//
	// Friendship
	//
	FriendshipPayload(context.Context, *puppet.FriendshipPayloadRequest) (*puppet.FriendshipPayloadResponse, error)
	FriendshipSearchPhone(context.Context, *puppet.FriendshipSearchPhoneRequest) (*puppet.FriendshipSearchPhoneResponse, error)
	FriendshipSearchWeixin(context.Context, *puppet.FriendshipSearchWeixinRequest) (*puppet.FriendshipSearchWeixinResponse, error)
	FriendshipAdd(context.Context, *puppet.FriendshipAddRequest) (*puppet.FriendshipAddResponse, error)
	FrendshipAccept(context.Context, *puppet.FriendshipAcceptRequest) (*puppet.FriendshipAcceptResponse, error)
	//*
	//
	// Message
	//
	MessagePayload(context.Context, *puppet.MessagePayloadRequest) (*puppet.MessagePayloadResponse, error)
	MessageContact(context.Context, *puppet.MessageContactRequest) (*puppet.MessageContactResponse, error)
	MessageFile(context.Context, *puppet.MessageFileRequest) (*puppet.MessageFileResponse, error)
	MessageImage(context.Context, *puppet.MessageImageRequest) (*puppet.MessageImageResponse, error)
	MessageMiniProgram(context.Context, *puppet.MessageMiniProgramRequest) (*puppet.MessageMiniProgramResponse, error)
	MessageUrl(context.Context, *puppet.MessageUrlRequest) (*puppet.MessageUrlResponse, error)
	MessageSendContact(context.Context, *puppet.MessageSendContactRequest) (*puppet.MessageSendContactResponse, error)
	MessageSendFile(context.Context, *puppet.MessageSendFileRequest) (*puppet.MessageSendFileResponse, error)
	MessageSendText(context.Context, *puppet.MessageSendTextRequest) (*puppet.MessageSendTextResponse, error)
	MessageSendMiniProgram(context.Context, *puppet.MessageSendMiniProgramRequest) (*puppet.MessageSendMiniProgramResponse, error)
	MessageSendUrl(context.Context, *puppet.MessageSendUrlRequest) (*puppet.MessageSendUrlResponse, error)
	MessageRecall(context.Context, *puppet.MessageRecallRequest) (*puppet.MessageRecallResponse, error)
	//*
	//
	// Room
	//
	RoomPayload(context.Context, *puppet.RoomPayloadRequest) (*puppet.RoomPayloadResponse, error)
	RoomList(context.Context, *puppet.RoomListRequest) (*puppet.RoomListResponse, error)
	RoomAdd(context.Context, *puppet.RoomAddRequest) (*puppet.RoomAddResponse, error)
	RoomAvatar(context.Context, *puppet.RoomAvatarRequest) (*puppet.RoomAvatarResponse, error)
	RoomCreate(context.Context, *puppet.RoomCreateRequest) (*puppet.RoomCreateResponse, error)
	RoomDel(context.Context, *puppet.RoomDelRequest) (*puppet.RoomDelResponse, error)
	RoomQuit(context.Context, *puppet.RoomQuitRequest) (*puppet.RoomQuitResponse, error)
	RoomTopic(context.Context, *puppet.RoomTopicRequest) (*puppet.RoomTopicResponse, error)
	RoomQRCode(context.Context, *puppet.RoomQRCodeRequest) (*puppet.RoomQRCodeResponse, error)
	RoomAnnounce(context.Context, *puppet.RoomAnnounceRequest) (*puppet.RoomAnnounceResponse, error)
	//*
	//
	// Room Member
	//
	RoomMemberPayload(context.Context, *puppet.RoomMemberPayloadRequest) (*puppet.RoomMemberPayloadResponse, error)
	RoomMemberList(context.Context, *puppet.RoomMemberListRequest) (*puppet.RoomMemberListResponse, error)
	//*
	//
	// Room Invitation
	//
	RoomInvitationPayload(context.Context, *puppet.RoomInvitationPayloadRequest) (*puppet.RoomInvitationPayloadResponse, error)
	RoomInvitationAccept(context.Context, *puppet.RoomInvitationAcceptRequest) (*puppet.RoomInvitationAcceptResponse, error)
	//*
	//
	// Tag
	//
	TagContactAdd(context.Context, *puppet.TagContactAddRequest) (*puppet.TagContactAddResponse, error)
	TagContactRemove(context.Context, *puppet.TagContactRemoveRequest) (*puppet.TagContactRemoveResponse, error)
	TagContactDelete(context.Context, *puppet.TagContactDeleteRequest) (*puppet.TagContactDeleteResponse, error)
	TagContactList(context.Context, *puppet.TagContactListRequest) (*puppet.TagContactListResponse, error)
}

// UnimplementedPuppetServer can be embedded to have forward compatible implementations.
type UnimplementedPuppetServer struct {
}

func (*UnimplementedPuppetServer) Start(ctx context.Context, req *puppet.StartRequest) (*puppet.StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedPuppetServer) Stop(ctx context.Context, req *puppet.StopRequest) (*puppet.StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedPuppetServer) Logout(ctx context.Context, req *puppet.LogoutRequest) (*puppet.LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedPuppetServer) Ding(ctx context.Context, req *puppet.DingRequest) (*puppet.DingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ding not implemented")
}
func (*UnimplementedPuppetServer) Version(ctx context.Context, req *puppet.VersionRequest) (*puppet.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedPuppetServer) Event(req *puppet.EventRequest, srv Puppet_EventServer) error {
	return status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (*UnimplementedPuppetServer) ContactSelfQRCode(ctx context.Context, req *puppet.ContactSelfQRCodeRequest) (*puppet.ContactSelfQRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactSelfQRCode not implemented")
}
func (*UnimplementedPuppetServer) ContactSelfName(ctx context.Context, req *puppet.ContactSelfNameRequest) (*puppet.ContactSelfNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactSelfName not implemented")
}
func (*UnimplementedPuppetServer) ContactSelfSignature(ctx context.Context, req *puppet.ContactSelfSignatureRequest) (*puppet.ContactSelfSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactSelfSignature not implemented")
}
func (*UnimplementedPuppetServer) ContactPayload(ctx context.Context, req *puppet.ContactPayloadRequest) (*puppet.ContactPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactPayload not implemented")
}
func (*UnimplementedPuppetServer) ContactAlias(ctx context.Context, req *puppet.ContactAliasRequest) (*puppet.ContactAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactAlias not implemented")
}
func (*UnimplementedPuppetServer) ContactAvatar(ctx context.Context, req *puppet.ContactAvatarRequest) (*puppet.ContactAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactAvatar not implemented")
}
func (*UnimplementedPuppetServer) ContactList(ctx context.Context, req *puppet.ContactListRequest) (*puppet.ContactListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactList not implemented")
}
func (*UnimplementedPuppetServer) FriendshipPayload(ctx context.Context, req *puppet.FriendshipPayloadRequest) (*puppet.FriendshipPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipPayload not implemented")
}
func (*UnimplementedPuppetServer) FriendshipSearchPhone(ctx context.Context, req *puppet.FriendshipSearchPhoneRequest) (*puppet.FriendshipSearchPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipSearchPhone not implemented")
}
func (*UnimplementedPuppetServer) FriendshipSearchWeixin(ctx context.Context, req *puppet.FriendshipSearchWeixinRequest) (*puppet.FriendshipSearchWeixinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipSearchWeixin not implemented")
}
func (*UnimplementedPuppetServer) FriendshipAdd(ctx context.Context, req *puppet.FriendshipAddRequest) (*puppet.FriendshipAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendshipAdd not implemented")
}
func (*UnimplementedPuppetServer) FrendshipAccept(ctx context.Context, req *puppet.FriendshipAcceptRequest) (*puppet.FriendshipAcceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FrendshipAccept not implemented")
}
func (*UnimplementedPuppetServer) MessagePayload(ctx context.Context, req *puppet.MessagePayloadRequest) (*puppet.MessagePayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagePayload not implemented")
}
func (*UnimplementedPuppetServer) MessageContact(ctx context.Context, req *puppet.MessageContactRequest) (*puppet.MessageContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageContact not implemented")
}
func (*UnimplementedPuppetServer) MessageFile(ctx context.Context, req *puppet.MessageFileRequest) (*puppet.MessageFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageFile not implemented")
}
func (*UnimplementedPuppetServer) MessageImage(ctx context.Context, req *puppet.MessageImageRequest) (*puppet.MessageImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageImage not implemented")
}
func (*UnimplementedPuppetServer) MessageMiniProgram(ctx context.Context, req *puppet.MessageMiniProgramRequest) (*puppet.MessageMiniProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageMiniProgram not implemented")
}
func (*UnimplementedPuppetServer) MessageUrl(ctx context.Context, req *puppet.MessageUrlRequest) (*puppet.MessageUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageUrl not implemented")
}
func (*UnimplementedPuppetServer) MessageSendContact(ctx context.Context, req *puppet.MessageSendContactRequest) (*puppet.MessageSendContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendContact not implemented")
}
func (*UnimplementedPuppetServer) MessageSendFile(ctx context.Context, req *puppet.MessageSendFileRequest) (*puppet.MessageSendFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendFile not implemented")
}
func (*UnimplementedPuppetServer) MessageSendText(ctx context.Context, req *puppet.MessageSendTextRequest) (*puppet.MessageSendTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendText not implemented")
}
func (*UnimplementedPuppetServer) MessageSendMiniProgram(ctx context.Context, req *puppet.MessageSendMiniProgramRequest) (*puppet.MessageSendMiniProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendMiniProgram not implemented")
}
func (*UnimplementedPuppetServer) MessageSendUrl(ctx context.Context, req *puppet.MessageSendUrlRequest) (*puppet.MessageSendUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSendUrl not implemented")
}
func (*UnimplementedPuppetServer) MessageRecall(ctx context.Context, req *puppet.MessageRecallRequest) (*puppet.MessageRecallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageRecall not implemented")
}
func (*UnimplementedPuppetServer) RoomPayload(ctx context.Context, req *puppet.RoomPayloadRequest) (*puppet.RoomPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomPayload not implemented")
}
func (*UnimplementedPuppetServer) RoomList(ctx context.Context, req *puppet.RoomListRequest) (*puppet.RoomListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomList not implemented")
}
func (*UnimplementedPuppetServer) RoomAdd(ctx context.Context, req *puppet.RoomAddRequest) (*puppet.RoomAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAdd not implemented")
}
func (*UnimplementedPuppetServer) RoomAvatar(ctx context.Context, req *puppet.RoomAvatarRequest) (*puppet.RoomAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAvatar not implemented")
}
func (*UnimplementedPuppetServer) RoomCreate(ctx context.Context, req *puppet.RoomCreateRequest) (*puppet.RoomCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomCreate not implemented")
}
func (*UnimplementedPuppetServer) RoomDel(ctx context.Context, req *puppet.RoomDelRequest) (*puppet.RoomDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomDel not implemented")
}
func (*UnimplementedPuppetServer) RoomQuit(ctx context.Context, req *puppet.RoomQuitRequest) (*puppet.RoomQuitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomQuit not implemented")
}
func (*UnimplementedPuppetServer) RoomTopic(ctx context.Context, req *puppet.RoomTopicRequest) (*puppet.RoomTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomTopic not implemented")
}
func (*UnimplementedPuppetServer) RoomQRCode(ctx context.Context, req *puppet.RoomQRCodeRequest) (*puppet.RoomQRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomQRCode not implemented")
}
func (*UnimplementedPuppetServer) RoomAnnounce(ctx context.Context, req *puppet.RoomAnnounceRequest) (*puppet.RoomAnnounceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomAnnounce not implemented")
}
func (*UnimplementedPuppetServer) RoomMemberPayload(ctx context.Context, req *puppet.RoomMemberPayloadRequest) (*puppet.RoomMemberPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomMemberPayload not implemented")
}
func (*UnimplementedPuppetServer) RoomMemberList(ctx context.Context, req *puppet.RoomMemberListRequest) (*puppet.RoomMemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomMemberList not implemented")
}
func (*UnimplementedPuppetServer) RoomInvitationPayload(ctx context.Context, req *puppet.RoomInvitationPayloadRequest) (*puppet.RoomInvitationPayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomInvitationPayload not implemented")
}
func (*UnimplementedPuppetServer) RoomInvitationAccept(ctx context.Context, req *puppet.RoomInvitationAcceptRequest) (*puppet.RoomInvitationAcceptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoomInvitationAccept not implemented")
}
func (*UnimplementedPuppetServer) TagContactAdd(ctx context.Context, req *puppet.TagContactAddRequest) (*puppet.TagContactAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagContactAdd not implemented")
}
func (*UnimplementedPuppetServer) TagContactRemove(ctx context.Context, req *puppet.TagContactRemoveRequest) (*puppet.TagContactRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagContactRemove not implemented")
}
func (*UnimplementedPuppetServer) TagContactDelete(ctx context.Context, req *puppet.TagContactDeleteRequest) (*puppet.TagContactDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagContactDelete not implemented")
}
func (*UnimplementedPuppetServer) TagContactList(ctx context.Context, req *puppet.TagContactListRequest) (*puppet.TagContactListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagContactList not implemented")
}

func RegisterPuppetServer(s *grpc.Server, srv PuppetServer) {
	s.RegisterService(&_Puppet_serviceDesc, srv)
}

func _Puppet_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Start(ctx, req.(*puppet.StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Stop(ctx, req.(*puppet.StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Logout(ctx, req.(*puppet.LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Ding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.DingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Ding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Ding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Ding(ctx, req.(*puppet.DingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).Version(ctx, req.(*puppet.VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_Event_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(puppet.EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PuppetServer).Event(m, &puppetEventServer{stream})
}

type Puppet_EventServer interface {
	Send(*puppet.EventResponse) error
	grpc.ServerStream
}

type puppetEventServer struct {
	grpc.ServerStream
}

func (x *puppetEventServer) Send(m *puppet.EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Puppet_ContactSelfQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactSelfQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactSelfQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactSelfQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactSelfQRCode(ctx, req.(*puppet.ContactSelfQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactSelfName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactSelfNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactSelfName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactSelfName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactSelfName(ctx, req.(*puppet.ContactSelfNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactSelfSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactSelfSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactSelfSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactSelfSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactSelfSignature(ctx, req.(*puppet.ContactSelfSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactPayload(ctx, req.(*puppet.ContactPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactAlias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactAlias(ctx, req.(*puppet.ContactAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactAvatar(ctx, req.(*puppet.ContactAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_ContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.ContactListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).ContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/ContactList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).ContactList(ctx, req.(*puppet.ContactListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipPayload(ctx, req.(*puppet.FriendshipPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipSearchPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipSearchPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipSearchPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipSearchPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipSearchPhone(ctx, req.(*puppet.FriendshipSearchPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipSearchWeixin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipSearchWeixinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipSearchWeixin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipSearchWeixin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipSearchWeixin(ctx, req.(*puppet.FriendshipSearchWeixinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FriendshipAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FriendshipAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FriendshipAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FriendshipAdd(ctx, req.(*puppet.FriendshipAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_FrendshipAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.FriendshipAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).FrendshipAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/FrendshipAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).FrendshipAccept(ctx, req.(*puppet.FriendshipAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessagePayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessagePayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessagePayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessagePayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessagePayload(ctx, req.(*puppet.MessagePayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageContact(ctx, req.(*puppet.MessageContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageFile(ctx, req.(*puppet.MessageFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageImage(ctx, req.(*puppet.MessageImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageMiniProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageMiniProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageMiniProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageMiniProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageMiniProgram(ctx, req.(*puppet.MessageMiniProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageUrl(ctx, req.(*puppet.MessageUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendContact(ctx, req.(*puppet.MessageSendContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendFile(ctx, req.(*puppet.MessageSendFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendText(ctx, req.(*puppet.MessageSendTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendMiniProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendMiniProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendMiniProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendMiniProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendMiniProgram(ctx, req.(*puppet.MessageSendMiniProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageSendUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageSendUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageSendUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageSendUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageSendUrl(ctx, req.(*puppet.MessageSendUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_MessageRecall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.MessageRecallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).MessageRecall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/MessageRecall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).MessageRecall(ctx, req.(*puppet.MessageRecallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomPayload(ctx, req.(*puppet.RoomPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomList(ctx, req.(*puppet.RoomListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomAdd(ctx, req.(*puppet.RoomAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomAvatar(ctx, req.(*puppet.RoomAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomCreate(ctx, req.(*puppet.RoomCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomDel(ctx, req.(*puppet.RoomDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomQuit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomQuitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomQuit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomQuit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomQuit(ctx, req.(*puppet.RoomQuitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomTopic(ctx, req.(*puppet.RoomTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomQRCode(ctx, req.(*puppet.RoomQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomAnnounce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomAnnounceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomAnnounce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomAnnounce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomAnnounce(ctx, req.(*puppet.RoomAnnounceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomMemberPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomMemberPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomMemberPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomMemberPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomMemberPayload(ctx, req.(*puppet.RoomMemberPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomMemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomMemberList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomMemberList(ctx, req.(*puppet.RoomMemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomInvitationPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomInvitationPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomInvitationPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomInvitationPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomInvitationPayload(ctx, req.(*puppet.RoomInvitationPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_RoomInvitationAccept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.RoomInvitationAcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).RoomInvitationAccept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/RoomInvitationAccept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).RoomInvitationAccept(ctx, req.(*puppet.RoomInvitationAcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_TagContactAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.TagContactAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).TagContactAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/TagContactAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).TagContactAdd(ctx, req.(*puppet.TagContactAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_TagContactRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.TagContactRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).TagContactRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/TagContactRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).TagContactRemove(ctx, req.(*puppet.TagContactRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_TagContactDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.TagContactDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).TagContactDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/TagContactDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).TagContactDelete(ctx, req.(*puppet.TagContactDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Puppet_TagContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(puppet.TagContactListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PuppetServer).TagContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wechaty.Puppet/TagContactList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PuppetServer).TagContactList(ctx, req.(*puppet.TagContactListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Puppet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "wechaty.Puppet",
	HandlerType: (*PuppetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Puppet_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Puppet_Stop_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Puppet_Logout_Handler,
		},
		{
			MethodName: "Ding",
			Handler:    _Puppet_Ding_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Puppet_Version_Handler,
		},
		{
			MethodName: "ContactSelfQRCode",
			Handler:    _Puppet_ContactSelfQRCode_Handler,
		},
		{
			MethodName: "ContactSelfName",
			Handler:    _Puppet_ContactSelfName_Handler,
		},
		{
			MethodName: "ContactSelfSignature",
			Handler:    _Puppet_ContactSelfSignature_Handler,
		},
		{
			MethodName: "ContactPayload",
			Handler:    _Puppet_ContactPayload_Handler,
		},
		{
			MethodName: "ContactAlias",
			Handler:    _Puppet_ContactAlias_Handler,
		},
		{
			MethodName: "ContactAvatar",
			Handler:    _Puppet_ContactAvatar_Handler,
		},
		{
			MethodName: "ContactList",
			Handler:    _Puppet_ContactList_Handler,
		},
		{
			MethodName: "FriendshipPayload",
			Handler:    _Puppet_FriendshipPayload_Handler,
		},
		{
			MethodName: "FriendshipSearchPhone",
			Handler:    _Puppet_FriendshipSearchPhone_Handler,
		},
		{
			MethodName: "FriendshipSearchWeixin",
			Handler:    _Puppet_FriendshipSearchWeixin_Handler,
		},
		{
			MethodName: "FriendshipAdd",
			Handler:    _Puppet_FriendshipAdd_Handler,
		},
		{
			MethodName: "FrendshipAccept",
			Handler:    _Puppet_FrendshipAccept_Handler,
		},
		{
			MethodName: "MessagePayload",
			Handler:    _Puppet_MessagePayload_Handler,
		},
		{
			MethodName: "MessageContact",
			Handler:    _Puppet_MessageContact_Handler,
		},
		{
			MethodName: "MessageFile",
			Handler:    _Puppet_MessageFile_Handler,
		},
		{
			MethodName: "MessageImage",
			Handler:    _Puppet_MessageImage_Handler,
		},
		{
			MethodName: "MessageMiniProgram",
			Handler:    _Puppet_MessageMiniProgram_Handler,
		},
		{
			MethodName: "MessageUrl",
			Handler:    _Puppet_MessageUrl_Handler,
		},
		{
			MethodName: "MessageSendContact",
			Handler:    _Puppet_MessageSendContact_Handler,
		},
		{
			MethodName: "MessageSendFile",
			Handler:    _Puppet_MessageSendFile_Handler,
		},
		{
			MethodName: "MessageSendText",
			Handler:    _Puppet_MessageSendText_Handler,
		},
		{
			MethodName: "MessageSendMiniProgram",
			Handler:    _Puppet_MessageSendMiniProgram_Handler,
		},
		{
			MethodName: "MessageSendUrl",
			Handler:    _Puppet_MessageSendUrl_Handler,
		},
		{
			MethodName: "MessageRecall",
			Handler:    _Puppet_MessageRecall_Handler,
		},
		{
			MethodName: "RoomPayload",
			Handler:    _Puppet_RoomPayload_Handler,
		},
		{
			MethodName: "RoomList",
			Handler:    _Puppet_RoomList_Handler,
		},
		{
			MethodName: "RoomAdd",
			Handler:    _Puppet_RoomAdd_Handler,
		},
		{
			MethodName: "RoomAvatar",
			Handler:    _Puppet_RoomAvatar_Handler,
		},
		{
			MethodName: "RoomCreate",
			Handler:    _Puppet_RoomCreate_Handler,
		},
		{
			MethodName: "RoomDel",
			Handler:    _Puppet_RoomDel_Handler,
		},
		{
			MethodName: "RoomQuit",
			Handler:    _Puppet_RoomQuit_Handler,
		},
		{
			MethodName: "RoomTopic",
			Handler:    _Puppet_RoomTopic_Handler,
		},
		{
			MethodName: "RoomQRCode",
			Handler:    _Puppet_RoomQRCode_Handler,
		},
		{
			MethodName: "RoomAnnounce",
			Handler:    _Puppet_RoomAnnounce_Handler,
		},
		{
			MethodName: "RoomMemberPayload",
			Handler:    _Puppet_RoomMemberPayload_Handler,
		},
		{
			MethodName: "RoomMemberList",
			Handler:    _Puppet_RoomMemberList_Handler,
		},
		{
			MethodName: "RoomInvitationPayload",
			Handler:    _Puppet_RoomInvitationPayload_Handler,
		},
		{
			MethodName: "RoomInvitationAccept",
			Handler:    _Puppet_RoomInvitationAccept_Handler,
		},
		{
			MethodName: "TagContactAdd",
			Handler:    _Puppet_TagContactAdd_Handler,
		},
		{
			MethodName: "TagContactRemove",
			Handler:    _Puppet_TagContactRemove_Handler,
		},
		{
			MethodName: "TagContactDelete",
			Handler:    _Puppet_TagContactDelete_Handler,
		},
		{
			MethodName: "TagContactList",
			Handler:    _Puppet_TagContactList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Event",
			Handler:       _Puppet_Event_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "puppet.proto",
}
